<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://larryshamalama.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://larryshamalama.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-24T20:44:24+00:00</updated><id>https://larryshamalama.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Metaclasses, Class for Classes</title><link href="https://larryshamalama.github.io/blog/2022/metaclass/" rel="alternate" type="text/html" title="Metaclasses, Class for Classes"/><published>2022-08-02T00:00:00+00:00</published><updated>2022-08-02T00:00:00+00:00</updated><id>https://larryshamalama.github.io/blog/2022/metaclass</id><content type="html" xml:base="https://larryshamalama.github.io/blog/2022/metaclass/"><![CDATA[<p>See <a href="https://github.com/aesara-devs/aeppl/pull/158">PR 158</a> of AePPL.</p> <p>In AePPL, variables from which we can obtain a log-probability function need to be instances of a <code class="language-plaintext highlighter-rouge">MeasurableVariable</code>. <code class="language-plaintext highlighter-rouge">RandomVariable</code>s are perhaps what comes first to mind when we think of object classes that inherit from <code class="language-plaintext highlighter-rouge">MeasurableVariable</code>, but other <code class="language-plaintext highlighter-rouge">Op</code>s also fall under this umbrella, e.g. <code class="language-plaintext highlighter-rouge">DiracDelta</code>, <code class="language-plaintext highlighter-rouge">MakeVector</code>, <code class="language-plaintext highlighter-rouge">CumOp</code>, etc. Note that the later two come under the form of <code class="language-plaintext highlighter-rouge">MeasurableMakeVector</code> and <code class="language-plaintext highlighter-rouge">MeasurableCumsum</code>, but that’s a whole other story.</p> <p>However, there are instances where we do <em>not</em> want to extract the log-probability of a variable, notably components in a mixture model. The reason is because we just need the log-probability of the mixture and we “pull” the component-specific log-probability function using indexing. In AePPL mixtures, components are “turned into” instances of <code class="language-plaintext highlighter-rouge">UnmeasurableX</code>, where <code class="language-plaintext highlighter-rouge">X</code> is the original class of the variable/component. These classes are created <em>dynamically</em>, that is they are created “on the fly” when calling <code class="language-plaintext highlighter-rouge">assign_custom_measurable_outputs</code>. For instance, consider the following example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">aesara.tensor</span> <span class="k">as</span> <span class="n">at</span>

<span class="n">X_rv</span> <span class="o">=</span> <span class="n">at</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mf">5.</span><span class="p">,</span> <span class="mf">3.</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">X</span><span class="sh">"</span><span class="p">)</span>
<span class="n">Y_rv</span> <span class="o">=</span> <span class="n">at</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="o">-</span><span class="mf">5.</span><span class="p">,</span> <span class="mf">3.</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Y</span><span class="sh">"</span><span class="p">)</span>
<span class="n">unmeasurable_X</span> <span class="o">=</span> <span class="nf">assign_custom_measurable_outputs</span><span class="p">(</span><span class="n">X_rv</span><span class="p">.</span><span class="n">owner</span><span class="p">).</span><span class="n">op</span> <span class="c1"># &lt;aesara.tensor.random.basic.UnmeasurableNormalRV at 0x1684808e0&gt;
</span><span class="n">unmeasurable_Y</span> <span class="o">=</span> <span class="nf">assign_custom_measurable_outputs</span><span class="p">(</span><span class="n">Y_rv</span><span class="p">.</span><span class="n">owner</span><span class="p">).</span><span class="n">op</span> <span class="c1"># &lt;aesara.tensor.random.basic.UnmeasurableNormalRV at 0x168483550&gt;
</span></code></pre></div></div> <p>While <code class="language-plaintext highlighter-rouge">X_rv</code> and <code class="language-plaintext highlighter-rouge">Y_rv</code> are normal random variables, i.e. instances created from the same <code class="language-plaintext highlighter-rouge">NormalRV</code> class, <code class="language-plaintext highlighter-rouge">unmeasurable_X</code> and <code class="language-plaintext highlighter-rouge">unmeasurable_X</code> are their unmeasurable counterpart. However, while <code class="language-plaintext highlighter-rouge">assign_custom_measurable_outputs</code> dynamically creates <code class="language-plaintext highlighter-rouge">UnmeasurableNormalRV</code> at each call, these seemingly same object classes are <strong>not</strong> identical; notice already the difference memory addresses (0x1684808e0 and 0x168483550). This discrepancy was by design, i.e. they could have been the same class but we chose not.</p> <p>However, the creation of new classes every time posed the issue of having each <code class="language-plaintext highlighter-rouge">UnmeasurableNormalRV</code> to not be “equal”, which we would want. Here, the use of language can be confusing; we want each <code class="language-plaintext highlighter-rouge">UnmeasurableNormalRV</code> classes to have the <em>same</em> hash but <em>different</em> ids. Having the same hash allows the ops to be “equal” by Python standards.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hash</span><span class="p">(</span><span class="n">unmeasurable_X</span><span class="p">)</span> <span class="o">==</span> <span class="nf">hash</span><span class="p">(</span><span class="n">unmeasurable_Y</span><span class="p">)</span> <span class="c1"># True: 4967640381975027986 == 4967640381975027986
</span><span class="nf">id</span><span class="p">(</span><span class="n">unmeasurable_X</span><span class="p">)</span> <span class="o">==</span> <span class="nf">id</span><span class="p">(</span><span class="n">unmeasurable_Y</span><span class="p">)</span> <span class="c1"># False: 6044493248 == 6044530000
</span>
<span class="n">unmeasurable_X</span> <span class="o">==</span> <span class="n">unmeasurable_Y</span> <span class="c1"># True, same hashes
</span><span class="n">unmeasurable_X</span> <span class="ow">is</span> <span class="n">unmeasurable_Y</span> <span class="c1"># False, different ids
</span></code></pre></div></div> <p>To allow object classes to be dynamically created yet have the same hash, we resort to <a href="https://en.wikipedia.org/wiki/Metaclass">metaclasses</a>, a class whose instances are classes themselves. The example above stems from the use of a newly created Python metaclass which I called <code class="language-plaintext highlighter-rouge">UnmeasurableMeta</code>, which inherits from <code class="language-plaintext highlighter-rouge">aesara.graph.utils.MetaType</code> which itself inherits from <code class="language-plaintext highlighter-rouge">abc.ABCMeta</code>, an Inception-like concept and the supreme lord of Python metaclasses.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UnmeasurableMeta</span><span class="p">(</span><span class="n">MetaType</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">id_obj</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">:</span>
            <span class="nb">dict</span><span class="p">[</span><span class="sh">"</span><span class="s">id_obj</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="k">return</span> <span class="nf">super</span><span class="p">().</span><span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">UnmeasurableMeta</span><span class="p">):</span>
            <span class="k">return</span> <span class="nf">hash</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">id_obj</span><span class="p">)</span> <span class="o">==</span> <span class="nf">hash</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">id_obj</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">__hash__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">hash</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">id_obj</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UnmeasurableVariable</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">UnmeasurableMeta</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    id_obj is an attribute, i.e. tuple of length two, of the unmeasurable class object.
    e.g. id_obj = (NormalRV, noop_measurable_outputs_fn)
    </span><span class="sh">"""</span>
</code></pre></div></div> <p>Effectively, the dunder methods <code class="language-plaintext highlighter-rouge">__eq__</code> and <code class="language-plaintext highlighter-rouge">__hash__</code> are overwritten to allow the behaviour above. For more information on the behaviour of unmeasurable variables, please see the newly added tests in <code class="language-plaintext highlighter-rouge">tests/test_abstract.py</code> of the AePPL repository.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Python Metaclasses and Bayesian Statistics, an unexpected marriage]]></summary></entry><entry><title type="html">Open-source for PhD students</title><link href="https://larryshamalama.github.io/blog/2022/value-oss/" rel="alternate" type="text/html" title="Open-source for PhD students"/><published>2022-06-18T00:00:00+00:00</published><updated>2022-06-18T00:00:00+00:00</updated><id>https://larryshamalama.github.io/blog/2022/value-oss</id><content type="html" xml:base="https://larryshamalama.github.io/blog/2022/value-oss/"><![CDATA[ <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"/> <div class="row"> <div class="col-sm-2 mt-3 mt-md-0"></div> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/pymc-logo-480.webp 480w,/assets/img/value-oss/pymc-logo-800.webp 800w,/assets/img/value-oss/pymc-logo-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/pymc-logo.png" class="img-fluid rounded mx-auto d-block" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-2 mt-3 mt-md-0"></div> </div> <p>As a PhD student moving to a new city at the height of the COVID-19 pandemic, remote schooling has inadvertently put a strain on learning and networking. However, this also presented an opportunity to be immersed in an environment that thrived in the online format: open-source. My current involvement with the community of PyMC, a Python library for Bayesian modeling, started from being curious and bored during lockdown and was catalyzed by stumbling across an opportunity to contribute to the codebase via Google Summer of Code (GSoC). Now, I am working part-time for PyMC Labs and I will start my second summer as a GSoC student and take the time to learn more about Dirichlet Processes (DP), <a href="https://github.com/aesara-devs/aesara/">Aesara</a> and <a href="https://github.com/aesara-devs/aeppl">AePPL</a> under the mentorship of <a href="https://github.com/ricardoV94">Ricardo Vieira</a> and <a href="https://brandonwillard.github.io/">Brandon Willard</a>. Above all, I feel happy. Here is my journey so far.</p> <h3 id="february-2020-pre-pandemic"><strong>February 2020: Pre-Pandemic</strong></h3> <p>My last 5 years at a student at McGill University were amazing. I met incredible people and I really enjoyed learning in this environment: Montreal’s liveliness, my part-time job as a campus tour guide and lots of statistical theory. Above all, I spent countless hours in the most beautiful building on our campus: Burnside Hall.</p> <div class="row"> <div class="col-sm-2 mt-3 mt-md-0"></div> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/burnside-outside-480.webp 480w,/assets/img/value-oss/burnside-outside-800.webp 800w,/assets/img/value-oss/burnside-outside-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/burnside-outside.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="burnside-outside" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The outside of Burnside Hall, taken in December 2021. </div> </div> <div class="col-sm-2 mt-3 mt-md-0"></div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/burnside-basement-480.webp 480w,/assets/img/value-oss/burnside-basement-800.webp 800w,/assets/img/value-oss/burnside-basement-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/burnside-basement.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Burnside basement, the happiest place on Earth only second to Disney World. </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/magid-luis-480.webp 480w,/assets/img/value-oss/magid-luis-800.webp 800w,/assets/img/value-oss/magid-luis-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/magid-luis.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Luis (left) and Magid (right), two of my closest friends talking about their adventures with complex analysis in Burnside basement. </div> </div> </div> <p>This statement is unironic despite its exterior concrete-slab look of a Minecraft dungeon. On the inside, the walls were no different but, despite its underwhelming appearance, there was something that energized me on a daily basis: a vibrant community. No matter the position of the sun, there were always people around to talk about math, programming or statistics or to vent with when school or life becomes stressful. As the pandemic hit on Thursday, March 13, 2020, I knew that it would take a while before I can be surrounded by the same concrete and people again.</p> <h3 id="july-2020-beta-variant-and-dp-summer-school"><strong>July 2020: Beta Variant and DP Summer School</strong></h3> <p>The first pandemic summer was not terrible as I spent most of my time finishing my Master’s thesis and mentally preparing for my upcoming PhD studies. I was skateboarding more and eating far too much fruit yogurt, just because I could. I missed my biostat and Burnside friends very much, but we were still able to keep touch via Zoom.</p> <p>Dr. Alexandra Schmidt, a Bayesian professor at McGill’s EBOH department, was a big inspiration of mine for learning about Bayesian statistics. That summer, she organized a <a href="https://www.youtube.com/playlist?list=PLHaWeIntAtAIjrTCeQ5ZfNlG2HRvtGOu4">workshop on Dirichlet Processes</a> taught by Dr. Peter Mueller, a well-established researcher in that area. Admittedly, I did not understand <em>anything</em> beyond the first 20 minutes of the first lecture but I found the whole paradigm very fascinating. Little did I know that this exposure to such a non-parametric method was the beginning of something much bigger for me.</p> <div class="row"> <div class="col-sm-2 mt-3 mt-md-0"></div> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/peter-mueller-ipad-480.webp 480w,/assets/img/value-oss/peter-mueller-ipad-800.webp 800w,/assets/img/value-oss/peter-mueller-ipad-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/peter-mueller-ipad.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="dp-class" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> "A Dirichlet Process is a prior distribution for distributions. People have also used them as distributions for distributions for distributions. It is simple yet ingenious." - Peter Mueller (I agree with exactly half of the last statement.) </div> </div> <div class="col-sm-2 mt-3 mt-md-0"></div> </div> <h3 id="september-2020-the-beginning-of-the-phd"><strong>September 2020: The Beginning of the PhD</strong></h3> <p>It sucked.</p> <p>I was welcomed to our new school via a Zoom call as I sat in my parents’ basement, a few days after submitting my Master’s thesis which was a few days after a remote break up. I knew that the school year would be a long one. I must thank <a href="https://lab.research.sickkids.ca/heath/">Dr. Anna Heath</a> with whom I did a year-long project on Bayesian analysis of clinical trials for her guidance and moral support for keeping me afloat during the difficult schoolyear.</p> <h3 id="april-2021-applying-to-gsoc"><strong>April 2021: Applying to GSoC</strong></h3> <p>After my winter semester, my constant efforts to socially engage with my cohort via Zoom and the ongoing academic workload was starting to tire me. With our three-part comprehensive exams scheduled for August in sight, I knew that I needed change. Regardless of the outcome of my theory exams, I had a strong urge to devote my energy and eagerness to do something else. One day in March, as I was browsing my Twitter feed, I came across the following Tweet.</p> <div class="row"> <div class="col-sm-2 mt-3 mt-md-0"></div> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/tweet-480.webp 480w,/assets/img/value-oss/tweet-800.webp 800w,/assets/img/value-oss/tweet-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/tweet.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" title="tweet.png" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> <a href="https://twitter.com/OriolAbril/status/1370130181130686465">The Tweet</a> that would somehow improve my overall PhD experience 🥲 </div> </div> <div class="col-sm-2 mt-3 mt-md-0"></div> </div> <p>To be frank, I thought that the PyMC project was previously in a rough spot because it relied on Theano, a tensor library which was no longer being supported. I knew that this would be an exciting opportunity for the summer as it would complement well my preparation for my highly theoretical and painful PhD comprehensive exams.</p> <p>Among the listed projects, there was one that immediately caught my eye: “Implementing a Truncated Dirichlet Process Functionality to PyMC3”. It reminded me of the 2020 DP Summer School where I did not understand anything about this fancy statistical model. Unknowingly aware of how difficult the learning curve ahead of me would be, I applied for this project and am happy that I did.</p> <h5 id="pymc-an-elevator-speech"><strong>PyMC: An Elevator Speech</strong></h5> <p>For the uninitiated, here is a summary of the PyMC framework. For the initiated, you are still welcome to read this part and criticize my summary below.</p> <p>PyMC is a probabilistic programming package for fitting Bayesian models. The previous major version is PyMC3 which relied on a tensor library called Theano; the newest major release, PyMC or PyMCv4.0, is now built on Aesara, a Python library heavily inspired by Theano for symbolic computation. Under a <code class="language-plaintext highlighter-rouge">pm.Model()</code> context manager, users are able to define their statistical model. Random variables can be observed or not and a key advantage of PyMC is that posterior sampling, which is of key interest in the Bayesian statistical paradigm, can be done automatically and efficiently.</p> <p>For instance, here is the conventional model for normally distributed data with conjugate priors:</p> \[\begin{align*} y \, | \, \mu, \sigma^2 \stackrel{\text{i.i.d.}}{\sim} &amp;\mathcal{N}(\mu, \sigma^2)\\ \mu \sim &amp;\mathcal{N}(0, 5)\\ \sigma \sim &amp;\text{Gamma}(1, 1) \, . \end{align*}\] <p>Given that the Python object <code class="language-plaintext highlighter-rouge">data</code> is the observed data, the PyMC model would be written as followed with prior, posterior and posterior predictive sampling:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/pymc-normal-example-480.webp 480w,/assets/img/value-oss/pymc-normal-example-800.webp 800w,/assets/img/value-oss/pymc-normal-example-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/pymc-normal-example.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="pymc-example" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Example of the intuitive PyMC API. </div> </div> </div> <h3 id="summer-2021-delta-variant-and-gsoc"><strong>Summer 2021: Delta Variant and GSoC</strong></h3> <p>Marginally, the 2021 summer was alright. Conditioned on GSoC, it was great; conditioned on everything else, it was quite underwhelming.</p> <p>On the personal side of things, I moved out of the apartment where I stayed in Montreal for my first year as a PhD student despite being enrolled in the University of Toronto. Around July, I finally moved to Toronto, but the pandemic was still around especially with the fear of the Delta variant rising. As our department was getting ready for a remote fall semester, I was studying for my theoretical exams, mostly alone, as my whole year of coursework was not only stressful but borderline useless for these exams (outside of the course in Survival analysis). Thankfully, I received a solid foundation in statistical theory from my Masters at McGill and I felt confident that I can do relatively well on these exams all while immersing myself into the PyMC codebase. I barely knew anyone when moving to Toronto, so I went skateboarding almost every day where it did not rain. As a result of overexercising, I sprained my ankle on July 17, 2022.</p> <div class="row"> <div class="col-sm-4 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/sprained-ankle-480.webp 480w,/assets/img/value-oss/sprained-ankle-800.webp 800w,/assets/img/value-oss/sprained-ankle-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/sprained-ankle.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Underneath the ice pack was my freshly sprained ankle. </div> </div> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/value-oss/olympics-480.webp 480w,/assets/img/value-oss/olympics-800.webp 800w,/assets/img/value-oss/olympics-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/value-oss/olympics.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Around July 24, 2022: My view of one of the heat of Men's street skateboarding at Tokyo 2020 Summer Olympics, the first time the sport was at the Olympic Games. </div> </div> </div> <p>On the flip side of the coin, GSoC was definitely a highlight of the summer. I am very grateful for my mentors <a href="https://github.com/fonnesbeck">Chris Fonnesbeck</a> and <a href="https://austinrochford.com/">Austin Rochford</a> who guided me through my first steps into the open-source world of PyMC. The learning curve was steep, as Dirichlet Processes are a theoretically challenging topic; I started with conducting simulation studies, managing Git branches and getting acquainted with the <a href="https://github.com/pymc-devs/pymc/blob/main/pymc/distributions/continuous.py#L476"><code class="language-plaintext highlighter-rouge">Distribution</code></a> and <a href="https://github.com/aesara-devs/aesara/blob/main/aesara/tensor/random/basic.py#L108-L119"><code class="language-plaintext highlighter-rouge">RandomVariable</code></a> structure that underpins Aesara and PyMC. None of these tasks actually entailed creating the submodule, but these intermediate learning steps were crucial. Above all, through this experience, I was able to interact with a community of people from various countries and, despite the technical skills that I have acquired, the implicit networking that I have done through contributing to open-source was invaluable.</p> <h3 id="september-2021-still-online"><strong>September 2021: Still Online…</strong></h3> <p>I passed my theory exams for my PhD program and my involvement with PyMC continued. As I started creating more issues and pull requests, I was learning a lot by doing and my confidence grew. My interactions with members of the PyMC community were always positive. Effectively, I was learning about a highly specialized technical topic, (probabilistic) programming, and establishing connections with passionated individuals; these were feelings that I was expecting from my PhD studies which were highly impacted by the global pandemic.</p> <h3 id="winter-2021-2022-omicron-variant-finding-support"><strong>Winter 2021-2022: Omicron Variant, Finding Support</strong></h3> <p>As winter and the Omicron variant came, more lockdowns were issued in Canada and restrictions were strengthened during the holidays. We remained online for the fourth consecutive term of my studies and the future was getting bleak on many levels. However, this is when I realized that the PyMC community has many members who had pursued a PhD degree and perhaps experienced some of the confusion that I was feeling, although outside of a pandemic. I figured why not reach out to them, for some support and perhaps some advice about my studies and prospective professional career. Below are four tips from community members that were generously shared with me.</p> <h5 id="tip-1-its-important-to-know-how-to-stop"><strong>Tip #1: It’s important to know how to stop.</strong></h5> <p>As graduate students, we are often just working, working and working. The endless effort put into our thesis or academic development may stem from our ambition or lack of other productive things to do. Regardless, striking a proper work-life balance is important and we are seldom taught on how to properly take breaks. This was effectively the case for me as I knew very well how to dedicate time to my projects and partake in more. It was a gradual yet important realization that, as much as I enjoy my studies, programming and statistics, it is equally or even more important to take breaks.</p> <h5 id="tip-2-no-skipping-steps"><strong>Tip #2: No skipping steps</strong></h5> <p>Dirichlet processes are primarily used within mixture models (DP Mixture) to model multi-modal data, that is data whose distribution has several peaks. To create some <code class="language-plaintext highlighter-rouge">pymc.DirichletProcessMixture</code> functionality, I need to think about the API for a general DP object. Before even thinking about how to design a general DP API for PyMC, I need to know DPs, which are fairly daunting in theory. From a statistical theory perspective, I need to know:</p> <ol> <li>what they are by definition;</li> <li>why they can be used as priors for random probability measures;</li> <li>the many representations of a DP;</li> <li>how to conduct a DP simulation study in NumPy.</li> </ol> <p>From a programming perspective, I need to learn how to:</p> <ol> <li>manage branches via Git;</li> <li>create pull requests and rebase them;</li> <li>create a custom distribution class in PyMC;</li> <li>how to debug Aesara.</li> </ol> <p>All in all, the creation of a DP submodule requires that I go through the many learning steps listed above and none should nor can be skipped. The slow realization of these sequential objectives overcomes the imposter syndrome that I felt as I dove head first into this project.</p> <h5 id="tip-3-be-confident"><strong>Tip #3: Be confident!</strong></h5> <p>While this advice may sound generic, it’s always nice to hear it from someone else, especially when stuck on something daunting, e.g. job hunting, debugging code, facing set-backs, etc. As graduate students, the process of spending several years writing a single document can be exhausting as there is always something more to work on (see tip #1). We are also often blinded by the work that needs to be done and the hurdles that we encounter as we fail to be proud of how far we have come in our studies. Building confidence is difficult yet important and, no matter the challenges we encounter, there is <em>always</em> reason to be proud of ourselves.</p> <h5 id="tip-4-know-how-much-you-are-worth-highly-compensated-yet-fun-work-is-available"><strong>Tip #4: Know how much you are worth. Highly compensated yet fun work is available.</strong></h5> <p>For graduate students, the thesis is the ticket to graduation and any other non-academic work can be a distraction from this precious ticket. An inadvertent consequence is that we often do not realize the value that we could bring in the workforce nor the out-of-academia jobs that would satisfy the desire to tacke scientifically advanced or innovative problems. In short, there are fun jobs that pay well as graduate education in a highly technical area is worth a lot (who would have known??).</p> <h3 id="summer-2022-and-beyond"><strong>Summer 2022 and Beyond</strong></h3> <p>While PyMC permits the use of truncated DP Mixtures, a nice API is yet to be made available. This is a work-in-progress and it is one of the objectives of my 2022 Google Summer of Code project. As mentioned in the first paragraph of this post, I will be diving deeper into Aesara and AePPL to better understand the computational engine of PyMC while having the DP submodule as the final end product. I will visit my former department at the University of Bordeaux and attend PyData London in mid-June. For the rest of the summer, a good portion will be devoted to relaxing, coding and enjoying some time off from my studies. I must give very special thanks to my amazing PhD advisors, Dr. Olli Saarela and Dr. Eleanor Pullenayegum, for their patience, guidance and support throughout my doctoral studies so far.</p> <p>For the future, I hope to stay involved within the PyMC community. It is becoming more and more apparent that the future for developing statistical software is bright, i.e. full of job opportunities. With a DP functionality available, an interesting avenue to pursue would be to create a Bayesian non-parametric toolbox as Gaussian Processes and Bayesian Additive Regression Trees (BART) are available with in PyMC. As for my PhD, I am looking forward to finally being in-person, mingling with my peers and continuing my research in dynamic treatment regimes.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Contributing to open-source is for everyone, especially PhD students!]]></summary></entry></feed>